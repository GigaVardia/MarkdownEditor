{"version":3,"sources":["Editor.js","index.js"],"names":["marked","require","burnLogo","icon","faBurn","expandIco","faExpandArrowsAlt","compressIco","faCompressAlt","Editor","props","resizeEditor","state","editorIco","document","getElementById","style","maxWidth","height","resize","display","setState","resizePreview","previewIco","handleChange","e","text","target","value","initialState","this","markdown","breaks","id","className","onClick","htmlFor","name","onChange","dangerouslySetInnerHTML","__html","Component","ReactDOM","render"],"mappings":"uPAMMA,EAASC,EAAQ,IAGjBC,EAAW,cAAC,IAAD,CAAiBC,KAAMC,MAClCC,EAAY,cAAC,IAAD,CAAiBF,KAAMG,MACnCC,EAAc,cAAC,IAAD,CAAiBJ,KAAMK,MAuG5BC,E,kDApGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IASRC,aAAe,WACT,EAAKC,MAAMC,YAAcR,GAC3BS,SAASC,eAAe,UAAUC,MAAMC,SAAW,MACnDH,SAASC,eAAe,aAAaC,MAAME,OAAS,OACpDJ,SAASC,eAAe,aAAaC,MAAMG,OAAS,OACpDL,SAASC,eAAe,aAAaC,MAAMI,QAAU,OAErD,EAAKC,SAAS,CACZR,UAAWN,MAGbO,SAASC,eAAe,UAAUC,MAAMC,SAAW,QACnDH,SAASC,eAAe,aAAaC,MAAME,OAAS,QACpDJ,SAASC,eAAe,aAAaC,MAAMG,OAAS,WACpDL,SAASC,eAAe,aAAaC,MAAMI,QAAU,QAErD,EAAKC,SAAS,CACZR,UAAWR,MA3BE,EAgCnBiB,cAAgB,WACV,EAAKV,MAAMW,aAAelB,GAC5BS,SAASC,eAAe,aAAaC,MAAMC,SAAW,MACtDH,SAASC,eAAe,iBAAiBC,MAAME,OAAS,OACxDJ,SAASC,eAAe,UAAUC,MAAMI,QAAU,OAElD,EAAKC,SAAS,CACZE,WAAYhB,MAGdO,SAASC,eAAe,aAAaC,MAAMC,SAAW,QACtDH,SAASC,eAAe,iBAAiBC,MAAME,OAAS,OACxDJ,SAASC,eAAe,UAAUC,MAAMI,QAAU,QAElD,EAAKC,SAAS,CACZE,WAAYlB,MA/CC,EAoDnBmB,aAAe,SAACC,GACd,EAAKJ,SAAS,CACZK,KAAMD,EAAEE,OAAOC,SApDjB,EAAKhB,MAAQ,CACXc,KAAMG,EACNhB,UAAWR,EACXkB,WAAYlB,GALG,E,qDA0DT,IACDqB,EAAQI,KAAKlB,MAAbc,KAEDK,EAAW/B,EAAO0B,EAAM,CAACM,QAAQ,IAEvC,OACE,gCACE,sBAAKC,GAAG,SAASC,UAAU,SAA3B,UACE,sBAAKA,UAAU,eAAf,UACE,qBAAKA,UAAU,oBAAf,SACGhC,IAEH,qBAAKgC,UAAU,oBAAf,oBACA,qBAAKA,UAAU,sBAAsBC,QAASL,KAAKnB,aAAnD,SACGmB,KAAKlB,MAAMC,eAIhB,sBAAKqB,UAAU,kBAAf,UACE,uBAAOE,QAAQ,cACf,0BAAUH,GAAG,YAAYI,KAAK,WAAWT,MAAOF,EAAMY,SAAUR,KAAKN,qBAIzE,sBAAKU,UAAU,UAAUD,GAAG,YAA5B,UACA,sBAAKC,UAAU,gBAAf,UACI,qBAAKA,UAAU,qBAAf,SACGhC,IAEH,qBAAKgC,UAAU,qBAAf,uBACA,qBAAKA,UAAU,uBAAuBC,QAASL,KAAKR,cAApD,SACGQ,KAAKlB,MAAMW,gBAIhB,qBAAKW,UAAU,sBAAsBD,GAAG,gBAAgBM,wBAAyB,CAACC,OAAQT,e,GA9F/EU,aAyGjBZ,EAAY,krCCjHhBa,IAASC,OACP,8BACE,cAAC,EAAD,MAGD7B,SAASC,eAAe,W","file":"static/js/main.4bd020c2.chunk.js","sourcesContent":["import './Editor.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBurn} from '@fortawesome/free-solid-svg-icons'\nimport { faExpandArrowsAlt } from '@fortawesome/free-solid-svg-icons'\nimport { Component } from 'react';\nimport { faCompressAlt } from '@fortawesome/free-solid-svg-icons'\nconst marked = require(\"marked\");\n\n\nconst burnLogo = <FontAwesomeIcon icon={faBurn} />\nconst expandIco = <FontAwesomeIcon icon={faExpandArrowsAlt} />\nconst compressIco = <FontAwesomeIcon icon={faCompressAlt} />\n\nclass Editor extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: initialState,\n      editorIco: expandIco,\n      previewIco: expandIco\n    }\n\n  }\n  \n  resizeEditor = () => {\n    if (this.state.editorIco === expandIco) {\n      document.getElementById('Editor').style.maxWidth = '90%';\n      document.getElementById('text-Area').style.height = '90vh';\n      document.getElementById('text-Area').style.resize = 'none';\n      document.getElementById('previewId').style.display = 'none';\n      \n      this.setState({\n        editorIco: compressIco\n      })\n    } else {\n      document.getElementById('Editor').style.maxWidth = '600px';\n      document.getElementById('text-Area').style.height = '235px';\n      document.getElementById('text-Area').style.resize = 'vertical';\n      document.getElementById('previewId').style.display = 'block';\n\n      this.setState({\n        editorIco: expandIco\n      })\n    }\n  }\n\n  resizePreview = () => {\n    if (this.state.previewIco === expandIco) {\n      document.getElementById('previewId').style.maxWidth = '90%';\n      document.getElementById('previewAreaId').style.height = 'auto';\n      document.getElementById('Editor').style.display = 'none'\n      \n      this.setState({\n        previewIco: compressIco\n      })\n    } else {\n      document.getElementById('previewId').style.maxWidth = '830px';\n      document.getElementById('previewAreaId').style.height = 'auto';\n      document.getElementById('Editor').style.display = 'block';\n\n      this.setState({\n        previewIco: expandIco\n      })\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      text: e.target.value\n    })\n  }\n\n  render() {\n    const {text} = this.state;\n\n    const markdown = marked(text, {breaks: true});\n\n    return (\n      <div>\n        <div id=\"Editor\" className=\"editor\">\n          <div className=\"editor-title\">\n            <div className=\"editor-title-logo\">\n              {burnLogo}\n            </div>\n            <div className=\"editor-title-text\">Editor</div>\n            <div className=\"editor-title-expand\" onClick={this.resizeEditor}>\n              {this.state.editorIco}\n            </div>\n          </div>\n\n          <div className=\"editor-textArea\">\n            <label htmlFor=\"text-Area\"></label>\n            <textarea id=\"text-Area\" name=\"textArea\" value={text} onChange={this.handleChange} />\n          </div>\n        </div>\n\n        <div className=\"preview\" id=\"previewId\">\n        <div className=\"preview-title\">\n            <div className=\"preview-title-logo\">\n              {burnLogo}\n            </div>\n            <div className=\"preview-title-text\">Previewer</div>\n            <div className=\"preview-title-expand\" onClick={this.resizePreview}>\n              {this.state.previewIco}\n            </div>\n          </div>\n\n          <div className=\"preview-previewArea\" id=\"previewAreaId\" dangerouslySetInnerHTML={{__html: markdown}}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Editor;\n\n\n// PLACEHOLDER\nlet initialState = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/React-icon.svg/1280px-React-icon.svg.png)\n`;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Editor from './Editor';\n\nReactDOM.render(  \n  <div>\n    <Editor/>\n  </div>\n  \n  ,document.getElementById('root')\n);\n\n"],"sourceRoot":""}